Introduction to React JS
*************************
=> React JS is an Open-source Javascript Library for building user interfaces.
=> It is used to create interactive web applications and single-page applications.
=> React JS is based on a component-based architecture, which makes it easy to create reusable and maintaainable code.
=> React JS is also known for its performance, as it only updates the parts of the UI that need to be updated. Which can improve the performance of your application.

History:
*********
=> React JS was created by Jordan Walke in 2013.
=> It was originally developed by Facebook to be used in its internal projects.
=> React JS was open-sourced in 2015 and has since become one of the most popular JavaScript frameworks.

Advantages of React JS:
************************
# Performance :
      React JS in known for its performance, as it only updates the parts of the UI that need to be updated.
# Reusability :
      React JS is based on a component-based architecture, which makes it easy to create reusable and maintainable code.
# Scalability :
      React JS is scalable, making it suitable for large and complex applications.
# Learnability :
      React JS is relatively easy to learn, making it a good choice for beginners.
# Community:
      React JS has a large and active community, which means that there are many resources available to help you learn and use the framework.

Disadvantages of React JS:
***************************
# Complexity :
    React JS can be complex, especially for beginners.
# Learning Curve :
    There is a learning curve associated with React JS, but it is not as steep as some other frameworks.
# State Management :
    React JS does not have a built-in state management solution, so you will need to use a third-party library.

Steps to create application in React JS
***************************************
1) Go to official website of node js and download it then install in your pc.
2) To check the version of node we can use below command-
    node -v OR node --version
3) To create app in React we need to install create-react-app package. This is used to create application in React. Below command is used to install it.
    npm install -g create-react-app

4) To create app in react we use below command
    create-react-app demoapp
Note :  Above command will create react application having name demoapp. This app will create with many subfolder and required modules, packages inside the folder.

5) To run React application we used below command
      npm start
Note: Before using "npm start" it is necessary to use correct directory that is(i.e) before this command, it must be usd your application folder.

npm :
****
=> npm Stands for "Node Package Manager".
=> In React every package and modules is known as node modules. So when we required any external modules or package we can simply install it inside our application with the help of npm.

Node JS :
*********
=> Node JS is open source and provides runtime environment for React application.
=> It is extensively used by developer to run javascript code in both environment client side and  server side without any need of any external tool for it.

JSX :
****
=> It stands for javascript XML.
=> It allows to run html code in react.
=> In react we used JSX  inside our component.

Component :
***********
=> Component is a independent piece of code that can be reused in any component where we required.
=> Component in react is like a function that returns html elements.
=> First Letter of component must be in capital letter
=> In React we have two types of component.
1. Class Component
2. Functional Component

1. Class Component :
--------------------
=> To use class component we have to used extend keyword to support some concept inheritance.
=> We used render keyword to return html element in class component.

2. Functional Component :
-------------------------
=> Functional component is same like class component, but it's syntax and code is simpler than class component.
=> We do not need to used extend and render method to used functional component.
Note : We can make any task in react by using any type of component.

Props:
*******
=> It stands for Properties.
=> Props are passed as argument into React component.

State:
******
=> State in React is a built-in object that is to used to store properties values of component.
=> We can initialize state inside the constructor of a class.
=> To update the values of state property we used setState method.
=> When the state of component get updated, component will rerendered.

Map():
******
=> map function is used to iterate on parent array by calling a specific function on each element of an array.
=> It returns the new array means original array will not get changed.
Syntax:
-------
arr.map((current_value)=>(operation_with_value));
Ex:
const newarr=arr.map((cv)=>(<h1>{cv}</h1>))

Steps to use bootstrap in React:
---------------------------------
=> Go to terminal and execute below command to install bootstrap package-
      npm i bootstrap
=> Add new library inside index.js
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';

Routing in React :
*******************
=> React Router is a standard library for creating dynamic routes and navigation in React JS Applications.
=> It allows you to manage navigation in your app by defining routes that connect the URL paths to specific components.
Below command is used to install routing in react application: -
-----------------------------------------------------------------
# Command: npm i react-router-dom

=> we chould import below module in index.js file to supporting routing.
import {BrowserRouter, Routes,Route} from "react-router-dom"
=> BrowserRouter is a tag which contained all the routes of our application.
=> To define routes every component we used 'Route' by defining path and name of component inside the Route tag.
For Example: 
    <BrowserRouter>
    <Routes>
        <Route index element={<Home />} />
        <Route path="about" element={<AboutUS />} />
        <Route path="contact" element={<ContactUs />} />
    </Routes>
  </BrowserRouter>

=> Here attribute is used to define the name by which we can access the login component in URL of the browser.
=> Element attribute contained the name of our component.

Note: all Route will be contained inside a parent tag i.e inside the 'Routes' tag.
Blow hierarchy is used to define routing in React Application 
<BrowserRouter>
<Routes>
<Route>
</Routes>
</BrowserRouter>

=> If we used anchor tag for linking our component it reload  the entire page. To avoid reloading of whole page we use Link tag in React application.
=> Link tag have attribute 'to' which define the path of component or we can say url of the component through we can access it on the browser.
Example:
=========
<Link className="nav-link" to="/registration">Register</Link>
Note: To used Link we have to import it from react-router-dom package.
import { Link } from 'react-router-dom'


Hooks in React JS:
*******************
=> Hooks is Introduced in react js in version 18.3
=> Hooks allow to access state and other react feacture in functional component only.
=> To use hook we have to import it from react module.
=> We can used to hooks only in functional component.
=> As we have many types of hooks in react but most of the time we used "useState" and "useEffect" hook.
1) useState Hooks:
--------------------
=> This hook is used to track the state of functional component.
=> It accept one value and return two value i.e current value and updated value.
=> useState hook should be used at the top of the component.

Syntax: 
--------
const [initialvalue, updatedValue]=useState(0)

Note: Here updatedValue can be treated as function. for Example:

const[date,setDate]=useState(0)
=> In above example data have initial value 0.

2) useEffect Hook:
-------------------
=> This hook is used when we implements the concept timer or during fetching any record from API.
=> It will be called everytime when the state of component changed or rerendered. 

fetch():
--------
=> Fetch is a function that is used to fetchinge data from API.
=> This function returns promise which is resolved by using then function.
fetch(api).then()
Ex:
----
fetch('url')            // api for the get request
      .then(response=> response.json())
      .then(data => console.log(data));


What is an API : 
*****************
=> An API(Application Programming Interface) acts as a messanger between applications/
=> It allows them to communicate and share data in a structured way.
=> Think of it like a waiter in a restarurant , taking your order (request) and delivering the food (response) from the kitchen (server).
=> Purpose : APIs allow different systems to communicate and share data or functionalities, promoting inge


Components:
1. Endpoints: Specific URLs where API requests are sent.
2. Methods: Standard HTTP methods such as GET, POST, PUT, DELETE used to perform operations.
3. Data Formates: Common formats like JSON and XML used to exchanging data.

Types of API:
1. Open APIs : Publicly available APIs that can be used by any developer.
2. Partner APIs : Restricted APIs  shared with specific Partners.
3. Internal APIs : Private APIs  used within an organization.
4. Composite APIs : Combine multiple API calls into a single call.

Benifits of usign API:
1. Efficiency : Streamlines the development process by reusing exiting functionalities.
2. Scalability : Enables the integration of scalabile services.
3. Flexibility
4. Innovation

Challanges of using API:
1. Security
2. Reliability
3. Compatibility
4. Performance

Real World API Examples:
1. Social media integration
2. E-commerce transaction
3. Weather forecasting
4. Map Service
5. Travel Booking Engines


API Testing Tools:
1. Definition : Tools designed to test the funcitonality, performance, and security of APIs.
2. Purpose : Ensure APIs meet the expected standards and perform reliably under various conditions.
3. Importance : Good for indetifying bugs, security issues, and performance before deployment.

Need for API Testing Tools : 
1. Ensure functionality
2. Security Assurance
3. Performance Testing
4. Reliability

Available API Testing tools :
1. Postman
2. SoapUI
3. Insomnia
4. Katalon Studio
5. Swagger Instector

1. Postman:
=> Postman is a popular api testing tool with a user-friendly interface.
=> Key features :API request building, automated testing environment management and collaboration.
=> Benifits : Simplifies the process of deploying, testing and monitoring APIs.
=> Use Cases: Sutaible for developers, testers and api consumers.
=> Communtiy and support: Large community extensive documentation and support resources.

API Tesing with postman:
=> Creating a new Request :
      # Open Postman, click on "New", and select "Request".
=> Confuguring the Request:
      # Enter the api endpoint url and select the HTTP method(GET,POST....) 
=> Adding Parameters and Headers :
      # Add any required query parameters, headers and body data.
=> Sending the Request :
      # Click "Send" to execute the request and view the response.

Http Methods:
1. GET :
=> Retrieve information from the server
=> Used for fetching data
2. POST :
=> Send data to the server to create a new resource.
=> Used for submitting data to be processed.
3. PUT:
=> Update an existing resource on the server.
4. DELETE :
=> Remove a resource from the server.


Common Status Codes:
=> 200 OK: the request has succeded.
=> 201 Created: The request has been fulfilled, resulting in the creatin of a new resource.
=> 400 Bad Request : The server could not understand the request due to invalid syntax.
=> 401 Unauthorized : The client must authenticate itself to get the requested response.
=> 404 Not found: The server can not find the requested resource.
=> 500 Internal server Error: The server has encournterd a situation it does not know how to handle.

HTTP Response Structure :
An HTTP response consists of four parts:
1. Status-Line: The first line contains the http version, a three-digit status code , and a reason phrase that describes the status code.
2. Headers (Optional): Headers are key value paisr that provides additional information about the response. Common headers include content type , which specifies the format of the response body, and content length , which indicates the size of the response body.
3. Blank Line: An empty line separates the headers from the body(if present).
4. Body(Optional) : The body contains the data being sent from the server to the client. This typically contains the requested resource(for GET requests) or a message about the outcome of the request (for other methods).










