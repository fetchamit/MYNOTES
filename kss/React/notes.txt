Introduction to React JS
*************************
=> React JS is an Open-source Javascript Library for building user interfaces.
=> It is used to create interactive web applications and single-page applications.
=> React JS is based on a component-based architecture, which makes it easy to create reusable and maintaainable code.
=> React JS is also known for its performance, as it only updates the parts of the UI that need to be updated. Which can improve the performance of your application.

History:
*********
=> React JS was created by Jordan Walke in 2013.
=> It was originally developed by Facebook to be used in its internal projects.
=> React JS was open-sourced in 2015 and has since become one of the most popular JavaScript frameworks.

Advantages of React JS:
************************
# Performance :
      React JS in known for its performance, as it only updates the parts of the UI that need to be updated.
# Reusability :
      React JS is based on a component-based architecture, which makes it easy to create reusable and maintainable code.
# Scalability :
      React JS is scalable, making it suitable for large and complex applications.
# Learnability :
      React JS is relatively easy to learn, making it a good choice for beginners.
# Community:
      React JS has a large and active community, which means that there are many resources available to help you learn and use the framework.

Disadvantages of React JS:
***************************
# Complexity :
    React JS can be complex, especially for beginners.
# Learning Curve :
    There is a learning curve associated with React JS, but it is not as steep as some other frameworks.
# State Management :
    React JS does not have a built-in state management solution, so you will need to use a third-party library.

Steps to create application in React JS
***************************************
1) Go to official website of node js and download it then install in your pc.
2) To check the version of node we can use below command-
    node -v OR node --version
3) To create app in React we need to install create-react-app package. This is used to create application in React. Below command is used to install it.
    npm install -g create-react-app

4) To create app in react we use below command
    create-react-app demoapp
Note :  Above command will create react application having name demoapp. This app will create with many subfolder and required modules, packages inside the folder.

5) To run React application we used below command
      npm start
Note: Before using "npm start" it is necessary to use correct directory that is(i.e) before this command, it must be usd your application folder.

npm :
****
=> npm Stands for "Node Package Manager".
=> In React every package and modules is known as node modules. So when we required any external modules or package we can simply install it inside our application with the help of npm.

Node JS :
*********
=> Node JS is open source and provides runtime environment for React application.
=> It is extensively used by developer to run javascript code in both environment client side and  server side without any need of any external tool for it.

JSX :
****
=> It stands for javascript XML.
=> It allows to run html code in react.
=> In react we used JSX  inside our component.

Component :
***********
=> Component is a independent piece of code that can be reused in any component where we required.
=> Component in react is like a function that returns html elements.
=> First Letter of component must be in capital letter
=> In React we have two types of component.
1. Class Component
2. Functional Component

1. Class Component :
--------------------
=> To use class component we have to used extend keyword to support some concept inheritance.
=> We used render keyword to return html element in class component.

2. Functional Component :
-------------------------
=> Functional component is same like class component, but it's syntax and code is simpler than class component.
=> We do not need to used extend and render method to used functional component.
Note : We can make any task in react by using any type of component.

Props:
*******
=> It stands for Properties.
=> Props are passed as argument into React component.

State:
******
=> State in React is a built-in object that is to used to store properties values of component.
=> We can initialize state inside the constructor of a class.
=> To update the values of state property we used setState method.
=> When the state of component get updated, component will rerendered.

Map():
******
=> map function is used to iterate on parent array by calling a specific function on each element of an array.
=> It returns the new array means original array will not get changed.
Syntax:
-------
arr.map((current_value)=>(operation_with_value));
Ex:
const newarr=arr.map((cv)=>(<h1>{cv}</h1>))

Steps to use bootstrap in React:
---------------------------------
=> Go to terminal and execute below command to install bootstrap package-
      npm i bootstrap
=> Add new library inside index.js
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';

Routing in React :
*******************
=> React Router is a standard library for creating dynamic routes and navigation in React JS Applications.
=> It allows you to manage navigation in your app by defining routes that connect the URL paths to specific components.
Below command is used to install routing in react application: -
-----------------------------------------------------------------
# Command: npm i react-router-dom

=> we chould import below module in index.js file to supporting routing.
import {BrowserRouter, Routes,Route} from "react-router-dom"
=> BrowserRouter is a tag which contained all the routes of our application.
=> To define routes every component we used 'Route' by defining path and name of component inside the Route tag.
For Example: 
    <BrowserRouter>
    <Routes>
        <Route index element={<Home />} />
        <Route path="about" element={<AboutUS />} />
        <Route path="contact" element={<ContactUs />} />
    </Routes>
  </BrowserRouter>

=> Here attribute is used to define the name by which we can access the login component in URL of the browser.
=> Element attribute contained the name of our component.

Note: all Route will be contained inside a parent tag i.e inside the 'Routes' tag.
Blow hierarchy is used to define routing in React Application 
<BrowserRouter>
<Routes>
<Route>
</Routes>
</BrowserRouter>

=> If we used anchor tag for linking our component it reload  the entire page. To avoid reloading of whole page we use Link tag in React application.
=> Link tag have attribute 'to' which define the path of component or we can say url of the component through we can access it on the browser.
Example:
=========
<Link className="nav-link" to="/registration">Register</Link>
Note: To used Link we have to import it from react-router-dom package.
import { Link } from 'react-router-dom'


