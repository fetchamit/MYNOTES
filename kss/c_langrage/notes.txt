C Programmin Language
**************************
ANSI - American National Standerd Institute.

Why to learn c :
-----------------
1) C helps to understand the fundamentals of computer theories.
2) C is very fast in terms of execution time.
3) C is used for writing operating systems as well as doing application level programming.
4) Base of other advance programming languages.
5) Simple to learn.

Introduction to C Language :
-----------------------------
1) C is general-purpose computer programming language.
2) C is a structured(procedural) programming language.
3) C was invented to write UNIX operating system.
4) C is successor of 'Basic Combined Programming Language'(BCPL) called B Language.
5) Linux OS, PHP  and MySQL are written in C.
6) C is a middle level programming language.
7) C language helps to understand the concepts of other languages.

Creation of C :
---------------
* C was originally developed at Bell Labs in 1972 by Dennis Ritchie.
* C has been standardized by the ANSI since 1989.
* Latest version of C is C23 that is released in Feb, 2024.

Features of C :
---------------
* Simple to learn.
* Structured Language
* Cross Plateform
* Base of various modern languages.
* Fast Execution
* Middle-level language
* Used in Embedded Application & IOT
* Used to write Kernel of OS

Execution Scenario :
--------------------
Detailed scenario :
===================
Source file -> | Compiler| -> object file -> | Linker |(Loaded Library functions) -> .exe file -> | Loader | -> Execution

Structure of a c program :
--------------------------
* C is a structure programming language. It has a fix structure to write program.
* A C program uses below structure -

  1) Documentation Section :
    => This section is used to write the details about our program by using comment lines.
    => It is an optional section.

  2) Link Section :
    => Used to link header files(libraries) in our program.
    => In this section we have to use "pre-processor" directives to link header files. It is denoted by # symbol.
    => It is an Mandatory section.

  3) Global Declaration Block :
    => This block is used to declare global variables and global functions.
    => It is an optional section.

  4) Main function block :
    A) Declaration Section :
        => Used to declare variables and constants.
        => It is optional section.
    B) Definition section :
        => Used to write statements inside function.
        => It is an essential section.
  
  5) Other function block :
    => This block is used to defind user defined functions.
    => It is an optional block.

=====================================================================
Variables :
-----------
=> Variables are memory space holders.
=> Variables are used to reserve the memory sapce so that we can store some data during run-time of program on that reserved space.
=> Variables represents a location of memory.
=> We can change the value of variable during the run-time of program.

Rules for creating a variable / function / class name :
-------------------------------------------------------
1) Variable names are case sensitive.
    Ex : name and Name are not same.

2) Variable name must be start with an alphabet. It can be alpha numeric.
    Ex : int age, num5, n55ag;         // Valid Names
    Ex : int 5age,34 ;                 // Invalid names

3) Special symbols are not allowed in a single variable name. Only underscore (_) is allowed.
    Ex : int user@age, my#;         // Invalid names
    Ex : int user_age ,_my;        // Valid names

4) We can not use a keyword name as a variable name.
    Ex : int if, void, for     //invalid names

5) We have to try to use limited number of characters in a variable name. Generally 10 to 12 characters are sufficient in a variable name.

6) Variables names are separated by using comma ( ,) symbol.
    Ex : int a,b,c;

7) White space is not allowed between a variable name.
    Ex : int user age;    // Invalid name

Data Types :
------------
=> Data types are used to define the type of data that a variable can store.
=> Data type also define the memory size and range of a variable.

Types of Data Types :
---------------------
1) Primary / Primitive / Basic / Library / Fundamental / Built-in Data Type :
    => The Data type that are already available with compiler are known as built -in data type.
       Data type         Size
        int             2 Byte
        float           4 Byte
        double          8 Byte
        char            1 Bit / 1 Byte (compiler dependent)
        long int        8 Byte
        long double     10 Byte

2) Derived Datatypes :
    => The Datatypes that are developed by using the primitive datatype are known as derived datatype.
        Ex : Array & Pointer.

3) User Defined Datatype :
    => The datatype that are defined by user or programmer to full fill the custom need are known as UDDT (User Define Data Type).
        Ex : struct , union, enum

I/O Functions in C :
---------------------
=> I/O functions are used to get input from user and to display output to the user.
=> Below are the main types ot input output functions in C -
  1) Formatted I/O Function.
  2) Character I/O function.
  3) String I/O function.

1) Formatted I/O Function
--------------------------
=> The function that needs to specify some format for performing input output operations are as formattd input output functions.
=> scanf() and printf() are formatted input output function.
=> scanf() stands for scan format and it is used ot read values from used in a specified format.
=> prinft()  stands for input format. It is used to print some output to user in specified format.
  Syntax of scanf():
    scanf("List_of_Identifiers",List_of_address_of_variables);
  Ex : scanf("%d%d",&num1,&num2);

Syntax of printf():
    printf("String Literal",List_of_variable_names);

Note : A string literal is a special string that can contains some string and identifiers both.
  Ex : printf("Addition is : %d",result);

Identifiers :
    %d for int
    %c for char
    %s for string
    %ld for long double

    
2) Character I/O Function :
---------------------------- 
=> The function that are used to read or write character values from user are known as character I/O function.
  a) getch() : Used to read a character from user. It does not displays entering character. Also no need to press enter button after input. This function can read any key from user.
Syntax : char getch();

  b) getche() : Used to read a character from user. It displays the entering character but no need to press enter button after input.
    Syntax : char getche();

  c) getchar() : Used to read a character from user. It displays the entering character and also we have to press enter button after input.
  Syntax : char getchar();

  d) putch()  : Used to print a character in output window.
  Syntax : putch(char);

3) String I/O Functions :
-------------------------
    a) gets() : It stands for get string and used to read a string value from user. this function can read a String with white space also.
    Syntax : gets(String_var);

    b) puts() : It is used to print a string value in output. It stands for put string. After printing of string it moves the cursor to next line.
    Syntax : puts(String_var);


Keywords :
---------
=> Keywords are the reserved words that has some pre defined meaning with-in compiler.
=> C Language has total 32 keywords.
  Ex : int,float,double,void,char, long, static, auto, extern, register, break, continue, for, while, do, if, else, goto etc.

Operators :
-----------
=> Operators are the symbols that are used to define operation between operands.
  Ex: a+b
Note : Here a and b are operand and + is an operator that defins addition between a and b.
Types of Operator :
------------------
1) On the basis of number of operands
  i) Unary Operator
      => The operator that has only one operand.
          Ex : ++,--,!
  ii) Binary Operator
      => The operator that works with multiple operands.
        Ex : +,-,*,/

2) On the basis of task/work/operation of operator
  A) Arithmatic Operator
    +,-,*,/,%
  B) Relational Operator
    <,>,<=,>=,!=
  C) Increment / Decrement
    ++,--
  D) Assignment Operator
    =
  E) Equalitiy Operator
    ==
  F) Binary Operator 
    <<,>>,~,&
  G) Comma operator
    ,
  H) Conditional Operator/ Ternary Operator
    Syntax : Condition?True_block:false_block;
  I) Logical Operator 
    Logical and &&
    Logical or ||
    Logical not !


    














