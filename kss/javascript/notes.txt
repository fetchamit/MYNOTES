Introduction to Javascript
********************************
=> Javascript is a programming language of HTML.
=> Javascript is a client side scripting language.
=> Javascript is a high level,untyped language.
=> Javascript is interpreted programming language.
=> Javascript runs in client's browser.
=> Javascript has been standardized in the ECMAScript language specification.
    (ECMA : European Computer Manufacturer's Association)
=> Javascript is 'object based' language.

Creation of JavaScript
*************************
=>Created in May 1995
=> Javascript is created by Netscape Corporation.
=> Inventor of Javascript : Brendan Eich


DOM(Document Object Model)
***************************
=> DOM Stands for Document Object Model.
=> It is an architecture that defines or treats a document as a collection of objects.
=> It is a concept of dealing with a document that is a collection of various objects.
=> HTML page is a collection of various tags and that tags are treated as objects in Javascript.
=> In Javascript there are some built-in objects of DOM. That objects are used to deal with DOM elements(tags).
    Ex: document,window.

Features of JavaScript
*************************
=> JS provides Client side validation.
=> JS can detect the client's browser and OS.
=> JS is simple.
=> DOM Traversing.
=> DOM Manipulation.
=> Event Handling.
=> Fast Execution.
=> Cross Browser Support.

S/W  Requirements 
********************
=> Web Browser.
=> Text Editor like notepad,notepad++,etc

What are different ways to write JS?
------------------------------------
1) Internal JS:
    => It is written inside the webpage by using script tag.
    => It is recomended to use script tag inside head tag of the webpage.
    Syntax :
        <script>
            // code of JS
        </script>

2) External JS :
    => It is written in an external JS file having extension  .js file.
    => External js file are linked in a webpage by using <script> tag.
    Syntax :
        <script src="path of js file"></script>

Note : There is no way to write inline js. we can just make function callings by using inline method.

Popup box/dialog box in JS:
-----------------------------
=> Popuup box are used to get some input or to display some output to the user.
=> Popup box gets more attention from the user.
=> JS has below three types of popup box -
1) alert()
2) prompt()
3)confirm()

1) alert():
-----------
=> Alert box is used to display some information to the user.
=> It appears with an ok button. User must have to click on OK. So it gets more attention from the user.
Syntax :
    alert("Message Here");

2) prompt() :
-------------
=> It is used to gets some input from the user.
=> We can read any type of value by using this function.
=> It returns the entered number. Hence we have to catch that value in a variable.
=> It appears with an ok and a cancel buton.
Syntax 1: prompt("Message Here");
Syntax 2: prompt("Message Here","Hint Text");
EX: prompt("Enter Your Name : ","Type here...");

3) confirm() :
----------------
=> This function is used to get confirmation from the user.
=> It appears with an ok and a cancel button.
=> If user clicks on OK the it reurns true otherwise it will return false. So it's return type is boolean.

Syntax : confirm("Message");
Ex : confrim("Are you sure to perform this operation");

Event Handling in JS :
***********************
=> Event handling is a process of handling an event in a software.
=> Event is an action performed by user in software screen.
=> A programmer has to write a function to handle the event and then execute that function on occurance of event. This process is known as event handling and this kind of function is known as handler function.

Syntax to create a function in JS :
-----------------------------------
function function_name(list_of_parameters){
    // function code
}

Note: Here "function" is a keyword that is used to define a function in JS.

=> Example of events in JS are : onclick, onchange, onload, onmouseover, onmouseout, onkeypress, onkeyup, etc.

DOM Accessing in JS :
**********************
=> DOM Accessing means accessing the object of a DOM element(tag).
=> It is a process of accessing the object of a tag from a HTML page.
=> It is also known as DOM traversing.
=> To access the object of a tag JS provides a built-in object of DOM. That object is document.
=> document object has a built-in function "getElementById()" that function is used to access the object of specified tag based on their id.
Syntax : 
----------
var name=document.getElementById("Id_of_tag");
Ex: var t=document.getElementById("txt1");

Accessing and modifying content of DOM Elements(DOM Manipulation) :
********************************************************************
=> JS provides the features to access(read) and modify the content of HTML tags during run-time. For that JS provides below properties-
1) value
2) innerText
3) innerHTML

1) value :
----------
=> This property is used to get/set the content of form controls.
=> We can use this property with input tag, select tag and textarea tag.
=> This property can't be used with normal HTML tags.

Syntax to get(read):
--------------------
varName=object_of_tag.value;
Ex 1: 
var x=document.getElementById("txt");
var y=x.value;

Ex 2:
var x=document.getElementById("text").value;

Syntax to set(write):
---------------------
Object_of_tag.value=content;
Ex 1:
var x=document.getElementById("txt");
x.value="Ram Kumar";

Ex 2:
document.getElementById("txt").value="Ram Kumar";

2) innerText:
-------------
=> This property is used to set/get the content of normal HTML controls(tags) in plain text format.
=> We can use this property with span,p,div,ul,ol,h1,table etc tags.
=> Generally we can't use this property with form controls(input,textarea,select).

Syntax to get:
--------------
varName=Object_of_tag.innerText;
Ex: var x=document.getElementById("mydv").innerText;

Syntax to Set:
--------------
Object_of_tag.innerText=content;
Ex: document.getElementById("mydv").innerText="Welcome to the world of Javascript";

3) innerHTML :
--------------
=> This property is used to get/set the content of normal HTML controls in HTML text format.
Note: Here HTML text format means some text with HTML tags.
=> We can use this property with span, p, div,ul,li,ol, table,etc tags.
=> Generally we can not use this property with form controls.

Syntax to get:
--------------
varName=Object_of_tag.innerHTML;
Ex: var x=document.getElementById("mypara").innerHTML;

Syntax to set:
---------------
Object_of_tag.innerHTML=content;
Ex: document.getElementById("mypara").innerHTML="<b>Welcome to the world of Javascript</b>";

Conditional Statements in Javascript :
***************************************
=> Just like c/c++;


Parameterised Functions in JS :
********************************
=> We can pass n number of parameters in a function of js as per our need.
=> There is no need to define data type of parameters just write the parameter name only.
=> To work with controls(tags) of HTML page we have to pass object of that tags in out function. For that just pass the id of that tag in function during function calling.
=> To pass the object of current tag in a parameter we can also use "this" keyword. This is a keyword that is used to represent the object of current tag in JS.


Managing Style using JS:
*************************
=> We can manage css styles of HTML tags by using JS.
=> JS has features that can read or modify value of a css for a specific tag property during run time.
=> JS provides two below methods for managing styles -
1) Managing inline css using javascript :
------------------------------------------
=> We can manage inline css properties using JS. For that each object of JS has a built-in property "style"

Syntax to get value of a css property :
    varName=Object_of_tag.style.Name_of_CSS_Property;
    Ex: var x= document.getElementById("dv").style.color;

Syntax to set value of a css property :
    Object_of_tag.style.Name_of_css_property="Value_of_css_property";
    Ex: document.getElementById("dv").style.color="pink";

Note : Properties with an dash between property name are used without dash by using the first character of next word in uppercase.
Ex: background-color
document.getElementById("dv").style.backgroundColor="silver";

2) Managing css classes using JS:
-----------------------------------
=> JS provides a property in each object that is "classList".
=> classList property can be used to add or remove or toggle the css classes in a specific tag by using JS.
=> classList property has three main functions -
i) add()
ii) remove()
iii) toggle()

Syntax to add a css class in a tag during runtime :
-----------------------------------------------------
Object_of_tag.classList.add("Name of css class");
Ex : document.getElementById("dv").classList.add("text-center");

Looping Statements in JS :
**************************
=> JS has three main loops-
A) for loop
B) while loop
C) do while loop

Note: Above 3 loops are just like c/c++.
=> JS also has some additional versions of for loop-
    1) for/in : Used to work with properties of object.
    2) for/of : Used to work with values of object(iterable object).

Note: Above two additional for loops will be discussed lated in object topic.

Array in JS :
**************
=> In JS an Array is collection of multiple items.
=> We can store same or different- different type of values in a single array in JS.
=> Array works on the basis of index. First index of an array is 0 and last index is length-1 of size-1;
=> Array has a property "length" that is used to know the size(Number of items) in an array.

Syntax to declare an array:
----------------------------
ArrayName=new Array(size);
Ex: var arr=new Array(10);

Note: Here Array is a constructor function that is used to declare an empty array. size is optional.

Syntax to declare and initialize an array:
------------------------------------------
ArrayName=[item1,item2,item3,.......,itemN];
Ex: var arr=[45,89,"Ramesh",78.3,55];

Some Important functions of Array in JavaScript:
-------------------------------------------------
1) at(): Used to find item of a specific index from an array. It is introduced in year 2022. We can also find item of specific index by using [] bracket. 
Ex: arr[4]

2) push(): Used to insert an item at end of the array.
Ex: arr.push(item)

3) pop(): Used to remove last item from an Array.
Ex: arr.pop()

4) shift(): Used to remove an item from beginning of the array and shift the position.
Ex: arr.shift()

5) unshift(): Used to add an item at the biginning of array and shift the position of items.
Ex: arr.unshift(item);

6) indexOf() : Used to find the first occurance index of an item in an array. If item found then it will return index of that item but if item not found in array then it will return -1.
Ex: arr.indexOf(item);

7)lastIndexOf(): Used to find last occurance index of an item in an array. If item found then it will return index of that item but if item not found in array then it will return -1.
Ex: arr.lastIndexOf(item);

8) join(): Used to convert all items of an array in a string by specifying the joining value.
Ex: arr.join(" * ");

9) sort(): Used to sort an array in ascending order. This function is specifically for string array. To sort a numeric aray we have to pass a comparer function inside sort() function. So that it can decide the large value.
Ex 1: arr.sort();
Ex 2: arr.sort(function(p,q)){return p-q});

10) reverse(): Used to reverse the sequence of items in an array.
Ex: arr.reverse();

String in JavaScript :
***********************
=> String is a sequence of characters.
=> String is a combination of various characters.
=> In JS, + operatior and "concat()" function both are used to concate any two string values.

Syntax  to declare a string variable:
-------------------------------------
varName="String_value";
Ex: var str="Jai Shree Ram";

Note: "length" property is used to find number of characters in a string.

Some Important functions of String in JS:
------------------------------------------
1). trim(): Used to remove white space (blank space) from begining and ending of an string.
Ex: var str="      I am Ramesh          ";
var s=str.trim();
// value in s will be :- "I am Ramesh"

2). trimStart()

3). trimEnd()

4). charAt(): It is used to find character of a specific index from a String.
Ex: var s="My name is Scott.";
var x=s.charAt(4);                // x='a'

5). toUpperCase(): Used to convert a string into uppercase.
Ex: var x=s.toUpperCase();

6). toLowerCase(): Used to convert a string into lower case.
Ex: var x=x.toLowerCase();

7). indexOf(): used to find first occurance index of a character/word in a given string. If not found then it returns -1.
Ex: var x=s.indexOf('p');

8). lastIndexOf(): Used to find last occurance index of a character/word. If not found then it returns -1.

9). charCodeAt(): Used to find ASCII value of character of specific index.
var s="Ramesh";
var x=s.charCodeAt(1);         // x=97

10). replace(): Used to replace first occurance word/char from a new word/char.
Syntax:
    str.replace(Old_value,new_value);

11). replaceAll(): Used to replace  search word/char by a new word/char from whole string.

12). split(): Used to break a string into multiple parts. This functions separates words of a string from a specified separator and return seperated parts in array form.
Ex: var a=str.split("a");

13). substring(): Used to get part of a string(substring).
Syntax 1: str.substring(startIndex,endIndex);
Syntax 2: str.substring(startIndex);

Note: If we will not specify endIndex then it will extract string till end of the string.

14). substr(): Used to get part of a string(substring).
Syntax 1: str.substr(startIndex,length);

15). concat(): Used to concat two string values.
Syntax : str1.concat(str2);

Note: In JS string value can be written inside "" or ''.

Objects in Javascript :
*************************
=> An Object is a collection of various properties and various methods.
=> In regular JS class and object are the same concept. But in modern JS, class and object are different.
=> {} curly braces are used to denote an object in JS.
=> We must have to assign all properties of an object with some default value. Properties of object can be used inside functions of object by using "this" keyword before the property name.

Syntax to create an object in regular JS:
-------------------------------------------
var ObjName={Property1Name:value,Property2Name:value,...,function1Name:function_definition,function2Name:function_definition};

Ex :
----
var circle={radius:5,pi:3.14,getArea:function(){
    var area=this.pi*this.radius*this.radius;
    alert("Area of Circle is "+area);
}
};

Note: .(dot) Operator is used to access the properties and method of an object.

Ex: var x=circle.radius;

Array of Objects :
********************
=> An Array of Object is a collection of various objects.
=> Array of object is used to store bulk records.
=> In JS, Array of object is denoted by [{}] brackets.
=> Array of Object is used to store multiple records. That record can be accessed by using index of that specific object.

Syntax to create Array of Object:
---------------------------------
var ArrayOfObject=[object1,object2,object3,.....];
## OR ##
var ArrayOfObject=[{},{},{},....];

Note: "length" property is used to find the size of an array of object in JS.

Ex:
-----
var laptops=[{lapid:1,brand:"HP",price:45670},{lapid:2,brand:"ASUS",price:42670},{lapid:3,brand:"DELL",price:43670},{lapid:4,brand:"MSI",price:60670}];


For in loop in JS :
--------------------
=> For in loop is used to iterate through the properties of an object.
=> It iterates an object like as an array.
=> For in loop provides us key of objects as index.
=> It is used to iterate in all properties of an object one by one.

Syntax :
---------
for(KeyVarName in ObjectName){
//    document.write(ObjectName[KeyVarName]);
}

Note: We can also use this loop with an array.
Ex:
var friend={fname:"Ramesh Singh",age:26,mob:7278512368,address:"Chitrakoot"};
for(x in friend){
alert(friend[x]);
} 

for of loop :
---------------
=> For of loop is used to iterate of strings and array.
=> Generally it is not used with object.
=> This loop is used to iterate on items of an array or items of String.
=> for in and for of are introduced in year 2015 by JS.

Syntax :
----------
for(varName of CollectionName){
//    document.write(VarName);
}
Ex:
var arr=[12,45,4,8,455,78]
for(item of arr){
alert(item);
}

Creating class by using class keyword :
****************************************
=> In modern JS; class is created with "class" keyword.
=> In most of the modern programming language "class" keyword is used to create a class.
=> Inside Javascript class we have to create a constructor() function to define properties for that class using this keyword.
=> In JS; constructor is always created with name "constructor" in all classes.
=> In modern JS; class and object both are different concepts.
=> Class : class is a collection of various properties and various methods.
Syntax :
---------
class <class_name>
{
    constructor()
    {
        this.property1Name=Default_value;
        this.property2Name=Default_value;
        ...
    }
   function1Name(Parameters){
        // Statements
    }
    function2Name(Parameters){
        // Statements
    }
}
Ex : 
class Rectangle
{
    constructor()
    {
        this.length=0;
        this.width=0;
    }
    getArea(){
        var res=this.length*this.width;
        return res;
    }
    getPerimeter(){
        var p=2(this.length+this.width);
        return p;
    }

}

Note : constructor() function and other function can be parametersized function also.

Object :
**********
=> Object is a copy of a class in memory.
=> Object creation means memory initialization. When we creates an object of a class that time a new copy of class will be loaded into memory.
=> Object is used to access the features of a class.
=> Object is a run-time entity that is used to represent the features of a class.
Syntax :
var ObjName=new ClassName();
Ex : var r=new Rectangle();

Note : Constructor function automatically executes when we created a object of class.

Prototype Property in JavaScript :
***********************************
=> Prototype is a built-in property in all objects of JS.
=> Prototype property is used to add some new features(Property & methods) in an existing object.
=> We can use this prototype with all user defined objects but it can not be used with built-in objects.
=> Some Programmers known it as inheritance in JS. But this is not actual inheritance.

Syntax :
---------
ObjectName.prototype.Name_of_Property/Function=value/Function_Definition

Ex:
    Student.prototype.fees=456;
                OR
    Student.prototype.FullName=function(){
        return this.fname+" "+this.lname;
    }

Note : This Method is also known as functional inheritance because we can add properties in constructor function objects also by using this method.

EX: 
----
## Below is a constructor function but also works as a class. 
function Student(){
    this.fname="Ramesh";
    this.lname="Kumar";
    this.rno=57;
## If we wants to add a function inside it then :
## this.demo:function(){
##     alert("Demo function");
## }

}
Student.prototype.getFullName=function(){
    return this.fname+" "+this.lname;
}
var s=new Student();
alert(s.fname);
alert("Full Name : "+s.getFullName());









